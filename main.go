/*
 * MyHwProj
 *
 * REST api for MyHwProj
 *
 * API version: 1.0.0
 * Contact: myhwproj@yandex.ru
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"fmt"
	"github.com/spf13/viper"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"log"
	"net/http"
	"os"
	"time"

	myhwproj "github.com/KaperD/HSE-SD-MyHwProj/internal"
)

func connectToDB() (db *gorm.DB, err error) {
	vp := viper.New()
	vp.SetConfigName("db_config")
	vp.SetConfigType("json")
	vp.AddConfigPath(".")
	if err := vp.ReadInConfig(); err != nil {
		log.Fatal(err)
	}
	host := vp.GetString("host")
	port := vp.GetString("port")
	user := vp.GetString("user")
	password := vp.GetString("password")
	dbname := vp.GetString("dbname")
	timeZone := vp.GetString("timeZone")

	dsn := fmt.Sprintf(
		"postgres://%s:%s@%s:%s/%s?TimeZone=%s",
		user,
		password,
		host,
		port,
		dbname,
		timeZone,
	)

	db, err = gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		return
	}

	err = db.AutoMigrate(&myhwproj.Homework{}, &myhwproj.Submission{})
	return
}

func main() {
	log.Printf("Server started")

	timezone, err := time.LoadLocation("Europe/Moscow")
	if err != nil {
		log.Fatal(err)
	}
	time.Local = timezone

	db, err := connectToDB()
	if err != nil {
		log.Fatal(err)
	}

	TemplateCache, err := myhwproj.NewTemplateCache("./ui/html")
	if err != nil {
		log.Fatal(err)
	}

	SubmissionDao := myhwproj.NewPostgresSubmissionDao(db)
	HomeworkDao := myhwproj.NewPostgresHomeworkDao(db)
	WorkersService := myhwproj.NewRabbitMQWorkersService()

	StudentApiService := myhwproj.NewStudentApiService(SubmissionDao, HomeworkDao, WorkersService)
	StudentApiController := myhwproj.NewStudentApiController(StudentApiService)

	StudentPagesApiService := myhwproj.NewStudentPagesApiService(StudentApiService, TemplateCache)
	StudentPagesApiController := myhwproj.NewStudentPagesApiController(StudentPagesApiService)

	TeacherApiService := myhwproj.NewTeacherApiService(SubmissionDao, HomeworkDao)
	TeacherApiController := myhwproj.NewTeacherApiController(TeacherApiService)

	TeacherPagesApiService := myhwproj.NewTeacherPagesApiService(TeacherApiService, TemplateCache)
	TeacherPagesApiController := myhwproj.NewTeacherPagesApiController(TeacherPagesApiService)

	router := myhwproj.NewRouter(StudentApiController, StudentPagesApiController, TeacherApiController, TeacherPagesApiController)

	port, ok := os.LookupEnv("PORT")
	if !ok {
		port = "8080"
	}
	log.Fatal(http.ListenAndServe(":"+port, router))
}
