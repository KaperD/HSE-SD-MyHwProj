/*
 * MyHwProj
 *
 * REST api for MyHwProj
 *
 * API version: 1.0.0
 * Contact: myhwproj@yandex.ru
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package myhwproj

import (
	"context"
	"errors"
	"fmt"
	"net/http"
)

// TeacherApiService is a service that implements the logic for the TeacherApiServicer
// This service should implement the business logic for every endpoint for the TeacherApi API.
// Include any external packages or services that will be required by this service.
type TeacherApiService struct {
	SubmissionDao SubmissionDao
	HomeworkDao   HomeworkDao
}

// NewTeacherApiService creates a default api service
func NewTeacherApiService(submissionDao SubmissionDao, homeworkDao HomeworkDao) TeacherApiServicer {
	return &TeacherApiService{SubmissionDao: submissionDao, HomeworkDao: homeworkDao}
}

// AddHomeworkTeacher - Add new homework
func (s *TeacherApiService) AddHomeworkTeacher(_ context.Context, newHomework NewHomework) (ImplResponse, error) {
	homework := s.HomeworkDao.AddHomework(newHomework)
	return Response(http.StatusOK, homework), nil
}

// GetHomeworkByIdTeacher - Get homework
func (s *TeacherApiService) GetHomeworkByIdTeacher(_ context.Context, homeworkId int64) (ImplResponse, error) {
	homework := s.HomeworkDao.GetHomeworkById(homeworkId)
	if homework == nil {
		return Response(http.StatusNotFound, nil), errors.New(fmt.Sprintf("homework with id %d not found", homeworkId))
	}
	return Response(http.StatusOK, homework), nil
}

// GetHomeworkSubmissionsTeacher - Get homework submissions
func (s *TeacherApiService) GetHomeworkSubmissionsTeacher(_ context.Context, homeworkId int64, offset int32, limit int32) (ImplResponse, error) {
	if offset < 0 || limit < 0 {
		return Response(http.StatusBadRequest, nil), errors.New("offset and limit must be non negative")
	}
	if s.HomeworkDao.GetHomeworkById(homeworkId) == nil {
		return Response(http.StatusNotFound, nil), errors.New(fmt.Sprintf("homework with id %d not found", homeworkId))
	}
	submissions := s.SubmissionDao.GetHomeworkSubmissions(homeworkId, offset, limit)
	return Response(http.StatusOK, submissions), nil
}

// GetHomeworksTeacher - Get homeworks
func (s *TeacherApiService) GetHomeworksTeacher(_ context.Context, offset int32, limit int32) (ImplResponse, error) {
	if offset < 0 || limit < 0 {
		return Response(http.StatusBadRequest, nil), errors.New("offset and limit must be non negative")
	}
	homeworks := s.HomeworkDao.GetHomeworks(offset, limit, false)
	return Response(200, homeworks), nil
}

// GetSubmissionTeacher - Get submission
func (s *TeacherApiService) GetSubmissionTeacher(ctx context.Context, submissionId int64) (ImplResponse, error) {
	submission := s.SubmissionDao.GetSubmissionById(submissionId)
	if submission == nil {
		return Response(http.StatusNotFound, nil), errors.New(fmt.Sprintf("submission with id %d not found", submissionId))
	}
	return Response(http.StatusOK, submission), nil
}
