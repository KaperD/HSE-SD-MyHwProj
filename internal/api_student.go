/*
 * MyHwProj
 *
 * REST api for MyHwProj
 *
 * API version: 1.0.0
 * Contact: myhwproj@yandex.ru
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package myhwproj

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// StudentApiController binds http requests to an api service and writes the service results to the http response
type StudentApiController struct {
	service      StudentApiServicer
	errorHandler ErrorHandler
}

// StudentApiOption for how the controller is set up.
type StudentApiOption func(*StudentApiController)

// WithStudentApiErrorHandler inject ErrorHandler into controller
func WithStudentApiErrorHandler(h ErrorHandler) StudentApiOption {
	return func(c *StudentApiController) {
		c.errorHandler = h
	}
}

// NewStudentApiController creates a default api controller
func NewStudentApiController(s StudentApiServicer, opts ...StudentApiOption) Router {
	controller := &StudentApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the StudentApiController
func (c *StudentApiController) Routes() Routes {
	return Routes{
		{
			"AddSubmissionStudent",
			strings.ToUpper("Post"),
			"/v1/student/homeworks/{homeworkId}/submissions",
			c.AddSubmissionStudent,
		},
		{
			"GetHomeworkByIdStudent",
			strings.ToUpper("Get"),
			"/v1/student/homeworks/{homeworkId}",
			c.GetHomeworkByIdStudent,
		},
		{
			"GetHomeworkSubmissionsStudent",
			strings.ToUpper("Get"),
			"/v1/student/homeworks/{homeworkId}/submissions",
			c.GetHomeworkSubmissionsStudent,
		},
		{
			"GetHomeworksStudent",
			strings.ToUpper("Get"),
			"/v1/student/homeworks",
			c.GetHomeworksStudent,
		},
		{
			"GetSubmissionStudent",
			strings.ToUpper("Get"),
			"/v1/student/submissions/{submissionId}",
			c.GetSubmissionStudent,
		},
	}
}

// AddSubmissionStudent - Add new submission
func (c *StudentApiController) AddSubmissionStudent(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	homeworkIdParam, err := parseInt64Parameter(params["homeworkId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, 0)
		return
	}

	newSubmissionParam := NewSubmission{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&newSubmissionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, 0)
		return
	}
	if err := AssertNewSubmissionRequired(newSubmissionParam); err != nil {
		c.errorHandler(w, r, err, 0)
		return
	}
	result, err := c.service.AddSubmissionStudent(r.Context(), homeworkIdParam, newSubmissionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, result.Code)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetHomeworkByIdStudent - Get homework
func (c *StudentApiController) GetHomeworkByIdStudent(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	homeworkIdParam, err := parseInt64Parameter(params["homeworkId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, 0)
		return
	}

	result, err := c.service.GetHomeworkByIdStudent(r.Context(), homeworkIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, result.Code)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetHomeworkSubmissionsStudent - Get homework submissions
func (c *StudentApiController) GetHomeworkSubmissionsStudent(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	homeworkIdParam, err := parseInt64Parameter(params["homeworkId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, 0)
		return
	}

	offsetParam, err := parseInt32Parameter(query.Get("offset"), true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, 0)
		return
	}
	limitParam, err := parseInt32Parameter(query.Get("limit"), true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, 0)
		return
	}
	result, err := c.service.GetHomeworkSubmissionsStudent(r.Context(), homeworkIdParam, offsetParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, result.Code)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetHomeworksStudent - Get homeworks
func (c *StudentApiController) GetHomeworksStudent(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	offsetParam, err := parseInt32Parameter(query.Get("offset"), true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, 0)
		return
	}
	limitParam, err := parseInt32Parameter(query.Get("limit"), true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, 0)
		return
	}
	result, err := c.service.GetHomeworksStudent(r.Context(), offsetParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, result.Code)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetSubmissionStudent - Get submission
func (c *StudentApiController) GetSubmissionStudent(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	submissionIdParam, err := parseInt64Parameter(params["submissionId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, 0)
		return
	}

	result, err := c.service.GetSubmissionStudent(r.Context(), submissionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, result.Code)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
