/*
 * MyHwProj
 *
 * REST api for MyHwProj
 *
 * API version: 1.0.0
 * Contact: myhwproj@yandex.ru
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package myhwproj

import (
	"time"
)

type Submission struct {
	Id int64 `json:"id" gorm:"primarykey"`

	HomeworkId int64 `json:"homeworkId"`

	// Date and time of making this submission. If time zone is not specified, +3 is taken
	Datetime time.Time `json:"datetime"`

	// Link to the solution
	Solution string `json:"solution"`

	// Mark out of 10. Null, if there were no checks
	Mark int32 `json:"mark"`

	// Message from checker
	Comment string `json:"comment"`

	// Used only for making HomeworkId foreign key
	homework *Homework `gorm:"foreignKey:HomeworkId"`
}

// AssertSubmissionRequired checks if the required fields are not zero-ed
func AssertSubmissionRequired(obj Submission) error {
	elements := map[string]interface{}{
		"id":         obj.Id,
		"homeworkId": obj.HomeworkId,
		"datetime":   obj.Datetime,
		"solution":   obj.Solution,
		"mark":       obj.Mark,
		"comment":    obj.Comment,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseSubmissionRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Submission (e.g. [][]Submission), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseSubmissionRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aSubmission, ok := obj.(Submission)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertSubmissionRequired(aSubmission)
	})
}
