/*
 * MyHwProj
 *
 * REST api for MyHwProj
 *
 * API version: 1.0.0
 * Contact: myhwproj@yandex.ru
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package myhwproj

import (
	"bytes"
	"context"
	"errors"
	"html/template"
	"log"
	"math"
	"net/http"
)

// TeacherPagesApiService is a service that implements the logic for the TeacherPagesApiServicer
// This service should implement the business logic for every endpoint for the TeacherPagesApi API.
// Include any external packages or services that will be required by this service.
type TeacherPagesApiService struct {
	TeacherApiService TeacherApiServicer
	TemplateCache     map[string]*template.Template
}

// NewTeacherPagesApiService creates a default api service
func NewTeacherPagesApiService(
	teacherApiService TeacherApiServicer,
	templateCache map[string]*template.Template,
) TeacherPagesApiServicer {
	return &TeacherPagesApiService{TeacherApiService: teacherApiService, TemplateCache: templateCache}
}

// CreateHomeworkPageTeacher - Get creating homework page
func (s *TeacherPagesApiService) CreateHomeworkPageTeacher(_ context.Context) (ImplResponse[string], error) {
	return s.renderPage("teacher.create.homework.gohtml", nil)
}

// GetHomeworkPageTeacher - Get homework page
func (s *TeacherPagesApiService) GetHomeworkPageTeacher(ctx context.Context, homeworkId int64, page int32) (ImplResponse[string], error) {
	homeworkResult, err := s.TeacherApiService.GetHomeworkByIdTeacher(ctx, homeworkId)
	if err != nil {
		return Response(homeworkResult.Code, ""), err
	}
	submissionsResult, err := s.TeacherApiService.GetHomeworkSubmissionsTeacher(ctx, homeworkId, 0, math.MaxInt32)
	if err != nil {
		return Response(submissionsResult.Code, ""), err
	}
	homework := homeworkResult.Body
	submissions := submissionsResult.Body

	return s.renderPage("teacher.homework.gohtml", map[string]any{"Homework": homework, "Submissions": submissions})
}

// GetHomeworksPageTeacher - Get homeworks page
func (s *TeacherPagesApiService) GetHomeworksPageTeacher(ctx context.Context, page int32) (ImplResponse[string], error) {
	homeworksResult, err := s.TeacherApiService.GetHomeworksTeacher(ctx, 0, math.MaxInt32)
	if err != nil {
		return Response(homeworksResult.Code, ""), err
	}
	homeworks := homeworksResult.Body

	return s.renderPage("teacher.homeworks.gohtml", map[string]any{"Homeworks": homeworks})
}

// GetSubmissionPageTeacher - Get submission page
func (s *TeacherPagesApiService) GetSubmissionPageTeacher(ctx context.Context, submissionId int64) (ImplResponse[string], error) {
	submissionResult, err := s.TeacherApiService.GetSubmissionTeacher(ctx, submissionId)
	if err != nil {
		return Response(submissionResult.Code, ""), err
	}
	submission := submissionResult.Body

	homeworkResult, err := s.TeacherApiService.GetHomeworkByIdTeacher(ctx, submission.HomeworkId)
	if err != nil {
		return Response(homeworkResult.Code, ""), err
	}
	homework := homeworkResult.Body

	return s.renderPage("teacher.submission.gohtml", map[string]any{"Submission": submission, "Homework": homework})
}

func (s *TeacherPagesApiService) renderPage(templateName string, data any) (ImplResponse[string], error) {
	ts, ok := s.TemplateCache[templateName]
	if !ok {
		log.Printf("Can't find html template %s\n", templateName)
		return Response(http.StatusInternalServerError, ""), errors.New("can't find html template")
	}

	buf := new(bytes.Buffer)
	err := ts.Execute(buf, data)
	if err != nil {
		log.Printf("Can't execute html template %s: %s\n", templateName, err.Error())
		return Response(http.StatusInternalServerError, ""), errors.New("can't execute html template")
	}
	return Response(http.StatusOK, buf.String()), nil
}
