/*
 * MyHwProj
 *
 * REST api for MyHwProj
 *
 * API version: 1.0.0
 * Contact: myhwproj@yandex.ru
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package myhwproj

import (
	"bytes"
	"context"
	"errors"
	"html/template"
	"log"
	"math"
	"net/http"
)

// StudentPagesApiService is a service that implements the logic for the StudentPagesApiServicer
// This service should implement the business logic for every endpoint for the StudentPagesApi API.
// Include any external packages or services that will be required by this service.
type StudentPagesApiService struct {
	StudentApiService StudentApiServicer
	TemplateCache     map[string]*template.Template
}

// NewStudentPagesApiService creates a default api service
func NewStudentPagesApiService(
	studentApiService StudentApiServicer,
	templateCache map[string]*template.Template,
) StudentPagesApiServicer {
	return &StudentPagesApiService{StudentApiService: studentApiService, TemplateCache: templateCache}
}

// CreateSubmissionPageStudent - Get creating submission page
func (s *StudentPagesApiService) CreateSubmissionPageStudent(ctx context.Context, homeworkId int64) (ImplResponse[string], error) {
	homeworkResult, err := s.StudentApiService.GetHomeworkByIdStudent(ctx, homeworkId)
	if err != nil {
		return Response(homeworkResult.Code, ""), err
	}
	homework := homeworkResult.Body
	return s.renderPage("student.create.submission.page.tmpl", map[string]any{"Homework": homework})
}

// GetHomeworkPageStudent - Get homework page
func (s *StudentPagesApiService) GetHomeworkPageStudent(ctx context.Context, homeworkId int64, page int32) (ImplResponse[string], error) {
	homeworkResult, err := s.StudentApiService.GetHomeworkByIdStudent(ctx, homeworkId)
	if err != nil {
		return Response(homeworkResult.Code, ""), err
	}
	submissionsResult, err := s.StudentApiService.GetHomeworkSubmissionsStudent(ctx, homeworkId, 0, math.MaxInt32)
	if err != nil {
		return Response(submissionsResult.Code, ""), err
	}
	homework := homeworkResult.Body
	submissions := submissionsResult.Body

	return s.renderPage("student.homework.page.tmpl", map[string]any{"Homework": homework, "Submissions": submissions})
}

// GetHomeworksPageStudent - Get homeworks page
func (s *StudentPagesApiService) GetHomeworksPageStudent(ctx context.Context, page int32) (ImplResponse[string], error) {
	homeworksResult, err := s.StudentApiService.GetHomeworksStudent(ctx, 0, math.MaxInt32)
	if err != nil {
		return Response(homeworksResult.Code, ""), err
	}
	homeworks := homeworksResult.Body

	return s.renderPage("student.homeworks.page.tmpl", map[string]any{"Homeworks": homeworks})
}

// GetSubmissionPageStudent - Get submission page
func (s *StudentPagesApiService) GetSubmissionPageStudent(ctx context.Context, submissionId int64) (ImplResponse[string], error) {
	submissionResult, err := s.StudentApiService.GetSubmissionStudent(ctx, submissionId)
	if err != nil {
		return Response(submissionResult.Code, ""), err
	}
	submission := submissionResult.Body

	homeworkResult, err := s.StudentApiService.GetHomeworkByIdStudent(ctx, submission.HomeworkId)
	if err != nil {
		return Response(homeworkResult.Code, ""), err
	}
	homework := homeworkResult.Body

	return s.renderPage("student.submission.page.tmpl", map[string]any{"Submission": submission, "Homework": homework})
}

func (s *StudentPagesApiService) renderPage(templateName string, data any) (ImplResponse[string], error) {
	ts, ok := s.TemplateCache[templateName]
	if !ok {
		log.Printf("Can't find html template %s\n", templateName)
		return Response(http.StatusInternalServerError, ""), errors.New("can't find html template")
	}

	buf := new(bytes.Buffer)
	err := ts.Execute(buf, data)
	if err != nil {
		log.Printf("Can't execute html template %s: %s\n", templateName, err.Error())
		return Response(http.StatusInternalServerError, ""), errors.New("can't execute html template")
	}
	return Response(http.StatusOK, buf.String()), nil
}
