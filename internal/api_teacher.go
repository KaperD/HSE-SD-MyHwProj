/*
 * MyHwProj
 *
 * REST api for MyHwProj
 *
 * API version: 1.0.0
 * Contact: myhwproj@yandex.ru
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package myhwproj

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// TeacherApiController binds http requests to an api service and writes the service results to the http response
type TeacherApiController struct {
	service TeacherApiServicer
	errorHandler ErrorHandler
}

// TeacherApiOption for how the controller is set up.
type TeacherApiOption func(*TeacherApiController)

// WithTeacherApiErrorHandler inject ErrorHandler into controller
func WithTeacherApiErrorHandler(h ErrorHandler) TeacherApiOption {
	return func(c *TeacherApiController) {
		c.errorHandler = h
	}
}

// NewTeacherApiController creates a default api controller
func NewTeacherApiController(s TeacherApiServicer, opts ...TeacherApiOption) Router {
	controller := &TeacherApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the TeacherApiController
func (c *TeacherApiController) Routes() Routes {
	return Routes{ 
		{
			"AddHomeworkTeacher",
			strings.ToUpper("Post"),
			"/v1/teacher/homeworks",
			c.AddHomeworkTeacher,
		},
		{
			"GetHomeworkByIdTeacher",
			strings.ToUpper("Get"),
			"/v1/teacher/homeworks/{homeworkId}",
			c.GetHomeworkByIdTeacher,
		},
		{
			"GetHomeworkSubmissionsTeacher",
			strings.ToUpper("Get"),
			"/v1/teacher/homeworks/{homeworkId}/submissions",
			c.GetHomeworkSubmissionsTeacher,
		},
		{
			"GetHomeworksTeacher",
			strings.ToUpper("Get"),
			"/v1/teacher/homeworks",
			c.GetHomeworksTeacher,
		},
		{
			"GetSubmissionTeacher",
			strings.ToUpper("Get"),
			"/v1/teacher/submissions/{submissionId}",
			c.GetSubmissionTeacher,
		},
	}
}

// AddHomeworkTeacher - Add new homework
func (c *TeacherApiController) AddHomeworkTeacher(w http.ResponseWriter, r *http.Request) {
	newHomeworkParam := NewHomework{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&newHomeworkParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertNewHomeworkRequired(newHomeworkParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddHomeworkTeacher(r.Context(), newHomeworkParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetHomeworkByIdTeacher - Get homework
func (c *TeacherApiController) GetHomeworkByIdTeacher(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	homeworkIdParam, err := parseInt64Parameter(params["homeworkId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.GetHomeworkByIdTeacher(r.Context(), homeworkIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetHomeworkSubmissionsTeacher - Get homework submissions
func (c *TeacherApiController) GetHomeworkSubmissionsTeacher(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	homeworkIdParam, err := parseInt64Parameter(params["homeworkId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	offsetParam, err := parseInt32Parameter(query.Get("offset"), true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	limitParam, err := parseInt32Parameter(query.Get("limit"), true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetHomeworkSubmissionsTeacher(r.Context(), homeworkIdParam, offsetParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetHomeworksTeacher - Get homeworks
func (c *TeacherApiController) GetHomeworksTeacher(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	offsetParam, err := parseInt32Parameter(query.Get("offset"), true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	limitParam, err := parseInt32Parameter(query.Get("limit"), true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetHomeworksTeacher(r.Context(), offsetParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetSubmissionTeacher - Get submission
func (c *TeacherApiController) GetSubmissionTeacher(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	submissionIdParam, err := parseInt64Parameter(params["submissionId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.GetSubmissionTeacher(r.Context(), submissionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
