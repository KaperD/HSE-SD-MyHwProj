/*
 * MyHwProj
 *
 * REST api for MyHwProj
 *
 * API version: 1.0.0
 * Contact: myhwproj@yandex.ru
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package myhwproj

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// TeacherPagesApiController binds http requests to an api service and writes the service results to the http response
type TeacherPagesApiController struct {
	service      TeacherPagesApiServicer
	errorHandler ErrorHandler
}

// TeacherPagesApiOption for how the controller is set up.
type TeacherPagesApiOption func(*TeacherPagesApiController)

// WithTeacherPagesApiErrorHandler inject ErrorHandler into controller
func WithTeacherPagesApiErrorHandler(h ErrorHandler) TeacherPagesApiOption {
	return func(c *TeacherPagesApiController) {
		c.errorHandler = h
	}
}

// NewTeacherPagesApiController creates a default api controller
func NewTeacherPagesApiController(s TeacherPagesApiServicer, opts ...TeacherPagesApiOption) Router {
	controller := &TeacherPagesApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the TeacherPagesApiController
func (c *TeacherPagesApiController) Routes() Routes {
	return Routes{
		{
			"CreateHomeworkPageTeacher",
			strings.ToUpper("Get"),
			"/teacher/homeworks/create",
			c.CreateHomeworkPageTeacher,
		},
		{
			"GetHomeworkPageTeacher",
			strings.ToUpper("Get"),
			"/teacher/homeworks/{homeworkId}",
			c.GetHomeworkPageTeacher,
		},
		{
			"GetHomeworksPageTeacher",
			strings.ToUpper("Get"),
			"/teacher/homeworks",
			c.GetHomeworksPageTeacher,
		},
		{
			"GetSubmissionPageTeacher",
			strings.ToUpper("Get"),
			"/teacher/submissions/{submissionId}",
			c.GetSubmissionPageTeacher,
		},
	}
}

// CreateHomeworkPageTeacher - Get creating homework page
func (c *TeacherPagesApiController) CreateHomeworkPageTeacher(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.CreateHomeworkPageTeacher(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeHTMLResponse(result.Body, &result.Code, w)

}

// GetHomeworkPageTeacher - Get homework page
func (c *TeacherPagesApiController) GetHomeworkPageTeacher(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	homeworkIdParam, err := parseInt64Parameter(params["homeworkId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	pageParam, err := parseInt32Parameter(query.Get("page"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetHomeworkPageTeacher(r.Context(), homeworkIdParam, pageParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeHTMLResponse(result.Body, &result.Code, w)

}

// GetHomeworksPageTeacher - Get homeworks page
func (c *TeacherPagesApiController) GetHomeworksPageTeacher(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	pageParam, err := parseInt32Parameter(query.Get("page"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetHomeworksPageTeacher(r.Context(), pageParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeHTMLResponse(result.Body, &result.Code, w)

}

// GetSubmissionPageTeacher - Get submission page
func (c *TeacherPagesApiController) GetSubmissionPageTeacher(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	submissionIdParam, err := parseInt64Parameter(params["submissionId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.GetSubmissionPageTeacher(r.Context(), submissionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeHTMLResponse(result.Body, &result.Code, w)

}
